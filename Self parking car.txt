//Ulra Sonic Pins (3 ultra sonic sensors)
//Back sensor
#define trigPin1 13
#define echoPin1 12
//Right sensor
#define trigPin2 11 
#define echoPin2 10 
//Front sensor
#define trigPin3 2 
#define echoPin3 1 
// Motors Speed 
#define SRight 125
#define SLeft 75

// Motor A = Right

#define enRight 9
#define in1  8
#define in2  7

// Motor B = Left

#define enLeft 3
#define in3  5
#define in4 4

//parking space

int space=0;
//Move Functions Prototype
void Stop();
void MoveForward();
void MoveLeft();
void MoveBack();
void MoveRight();
//ultra Sonic Function prototype
int UFun(int triger,int echo);
//functions prototypes
void Park();
int Check();

void setup() {
//ultra sonic pins
  pinMode(trigPin1,OUTPUT);
  pinMode(echoPin1,INPUT);
  pinMode(trigPin2,OUTPUT);
  pinMode(echoPin2,INPUT);
  pinMode(trigPin3,OUTPUT);
  pinMode(echoPin3,INPUT);
  
// Set all the motor control pins to outputs

  pinMode(enRight, OUTPUT);
  pinMode(enLeft, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
}

void loop() {
  delay(2000);
  if (Check()==1&& space>75){//space is measured by trial and error to check the right value ,it's varied by the speed
    space=0;
    Stop();
    delay(1000);
    Park();
    exit(0);
    }
  else {
    if(UFun(trigPin1,echoPin1)>4&&UFun(trigPin3,echoPin3)>4)
    {
      MoveForward();
    }
    else{
      Stop();
      }
    }
}

void Park(){//Parking algorithm
  MoveBack();
  delay(1000);
  Stop();
  delay(3000);
  MoveLeft();
  delay(1500);
  while(UFun(trigPin1,echoPin1)>8){
  MoveBack();
  }
  Stop();
  delay(2000);
  MoveRight();
  delay(1600);
  Stop();
 
  }
int Check(){//Chicking the sutable parking space for the car width
  int Flag =0;
  while(UFun(trigPin2,echoPin2)>15){
    MoveForward();
    space++;
    Flag =1;
    }
  return Flag;
  }
int UFun(int triger , int echo){//ultrasonic reading 
   long duration ;
   int distance;
        digitalWrite(triger,LOW);
        delayMicroseconds(2);
        digitalWrite(triger, HIGH);
        delayMicroseconds(10);
        digitalWrite(triger,LOW);
    
        duration = pulseIn(echo,HIGH);
        distance = duration/2 /29.1 ; // 331.5 m/s ===> 0 C.....331.5 +0.6*temp....343.5*100/1000000=.03435cm/us
  return distance; 
  
  }
void MoveBack(){
  // Turn on motor A
      
        digitalWrite(in1, HIGH);
        digitalWrite(in2, LOW);
      
        // Set speed to 200 out of possible range 0~255
      
        analogWrite(enRight, SRight);
      
        // Turn on motor B
      
        digitalWrite(in3, LOW);
        digitalWrite(in4, HIGH);
      
        // Set speed to 200 out of possible range 0~255
      
        analogWrite(enLeft, SLeft);
  
  
  }
void MoveLeft(){

  // Turn on motor A

  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enRight, SRight);

  // Turn on motor B

  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enLeft, SLeft);

  

  }
void MoveRight(){
      
    // Turn on motor A

  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enRight, SRight);

  // Turn on motor B

  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enLeft, SLeft);


     }
void Stop(){
  // Now turn off motors
 
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);  
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  
  }
void MoveForward() {
    // Turn on motor A

  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enRight, SRight);

  // Turn on motor B

  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);

  // Set speed to 200 out of possible range 0~255

  analogWrite(enLeft, SLeft);


}
